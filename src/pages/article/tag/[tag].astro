---
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import Container from '@components/common/Container.astro';
import ArticleList from '@components/article/ArticleList.astro';
import Breadcrumb from '@components/common/Breadcrumb.astro';
import {tagPaths, getTagListBySlugs, getTagDataBySlug} from '@utils/article-tags';
import { getSortedPosts } from '@utils/article';
import ArticleArchiveSidebar from '@components/article/ArticleArchiveSidebar.astro';

export async function getStaticPaths() {
  const articleEntries = await getCollection('article', ({data}) => {
    return data.isDraft === false;
  });

  const paths = tagPaths
    .map((tag) => {
      // タグに関連する記事をフィルタリング
      const filteredPosts = articleEntries.filter((post) =>
        post.data.tags?.includes(tag.params.tag)
      );

      // 関連する記事がない場合は null を返す
      if (filteredPosts.length === 0) {
        return null;
      }

      // 関連する記事がある場合は有効な path を生成
      return {
        ...tag,
        props: { posts: filteredPosts }, // フィルタリング済みの記事を props として渡す
      };
    })
    .filter(Boolean); // null を除去
    return paths;
  }

const {tag} = Astro.params;
const {posts} = Astro.props;

const sortedArticles = getSortedPosts(posts);
---

<Layout>
	<div class="page">
		<div class="hero">
			<h1>
			 <span class="en">TAG ARTICLES</span>
			 <span class="jp">タグ: {getTagDataBySlug(tag).label}</span>
       <span class="tag"></span>
		 </h1>
	 </div>
	 <div class="body">
		 <Container>
			 <Breadcrumb data={[
				 { label: 'ホーム', href: '/' },
				 { label: '記事一覧', href: '/article' },
				 { label: `${getTagDataBySlug(tag).label}の記事一覧` },
			 ]} />
			 <div class="wrap">
				 <main class="main">
					 <ArticleList articles={sortedArticles} />
				 </main>
				 <ArticleArchiveSidebar />
			 </div>
		 </Container>
	 </div>
	</div>
</Layout>

<style lang="scss">

.hero {
		position: relative;
		padding: 16rem 4rem;
		overflow: hidden;
		background-color: #f1f6ff;

		display: flex;
		align-items: center;
		justify-content: center;
		flex-direction: column;

		h1 {
			display: flex;
			align-items: center;
      flex-direction: column;

      span {

        &.en {
          font-family: var.$font-en;
          font-size: 1.6rem;
          letter-spacing: .08em;
          color: var.$c-main-v;
          font-weight: 500;
        }

        &.jp {
          font-size: 3.6rem;
          font-weight: bold;
          margin-top: .4rem;
        }

        &.tag {
          font-size: 1.6rem;
          font-weight: bold;
          margin-top: 1.6rem;
        }
      }
		}
	}

	.page {
		padding: 8rem 0 0;
	}

	.body {
		padding-top: 6.4rem;
		padding-bottom: 12rem;
		border-top: .1rem solid var.$c-gray-l;
		background-image: linear-gradient(to bottom, var.$c-white 0, var.$c-gray-l 100%);
	}
	
	.wrap {
		display: flex;
		justify-content: space-between;
		gap: 4rem;
		margin-top: 2.4rem;
	}
	
	.main {
		flex-grow: 1;
		max-width: 80rem;
	}
	</style>
