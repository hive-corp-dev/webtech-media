---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/common/Container.astro";
import ArticleList from "@components/article/ArticleList.astro";
import Breadcrumb from "@components/common/Breadcrumb.astro";
import { getSortedPosts } from "@utils/article";
import ArticleArchiveSidebar from "@components/article/ArticleArchiveSidebar.astro";
import Pagination from "@components/article/Pagination.astro";
import { getPaginatedMonthlyArticlesMetadata } from "@data/metadata";

export async function getStaticPaths() {
  const allPosts = await getCollection("article", ({ data }) => {
    return data.isDraft === false;
  });

  // 1. 各記事の `publishedAt` から "YYYY-M" 形式の文字列を作成
  const yearMonthStrings = allPosts.map((post) => {
    const date = new Date(post.data.publishedAt);
    return `${date.getFullYear()}-${date.getMonth() + 1}`;
  });

  // 2. `Set` を使って重複を削除（ユニークな年月だけ取得）
  const uniqueYearMonthStrings = Array.from(new Set(yearMonthStrings));

  // 3. 文字列を `{ year, month }` のオブジェクトに変換
  const archiveMonths = uniqueYearMonthStrings.map((str) => {
    const [year, month] = str.split("-").map(Number);
    return { year, month };
  });

  return archiveMonths.flatMap(({ year, month }) => {
    // 記事をフィルタリング
    const filteredPosts = allPosts.filter((post) => {
      const date = new Date(post.data.publishedAt);
      return date.getFullYear() === year && date.getMonth() + 1 === month;
    });

    const sortedPosts = filteredPosts.sort((a, b) => {
      return new Date(b.data.publishedAt) - new Date(a.data.publishedAt);
    });

    return {
      params: {
        year: year.toString(), // .toString() より String() のほうが短くてシンプル
        month: month.toString().padStart(2, "0"),
      },
      props: { sortedPosts },
    };
  });
}

const { sortedPosts } = Astro.props;
const params = Astro.params;
---

<Layout>
  <div class="page">
    <div class="hero">
      <h1>
        <span class="en">ARTICLES BY MONTH</span>
        <span class="jp">{params.year}年{Number(params.month)}月の記事一覧</span
        >
      </h1>
    </div>
    <div class="body">
      <Container>
        <div class="page-count"></div>
        <div class="wrap">
          <main class="main">
            <ArticleList articles={sortedPosts} />
          </main>
          <ArticleArchiveSidebar />
        </div>
      </Container>
    </div>
  </div>
</Layout>

<style lang="scss">
  .hero {
    position: relative;
    padding: 16rem 4rem;
    overflow: hidden;
    background-color: #f1f6ff;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;

    @include mixin.sp {
      padding: 6.4rem 1.6rem;
    }

    h1 {
      display: flex;
      align-items: center;
      flex-direction: column;

      span {
        &.en {
          font-family: var.$font-en;
          font-size: 1.6rem;
          letter-spacing: 0.08em;
          color: var.$c-main-v;
          font-weight: 500;

          @include mixin.sp {
            font-size: 1.4rem;
          }
        }

        &.jp {
          font-size: 3.6rem;
          font-weight: bold;
          margin-top: 0.4rem;

          @include mixin.sp {
            font-size: 2.4rem;
            margin-top: 0;
          }
        }

        &.tag {
          font-size: 1.6rem;
          font-weight: bold;
          margin-top: 1.6rem;
        }
      }
    }
  }

  .page {
    padding: 8rem 0 0;

    @include mixin.sp {
      padding: 5.6rem 0 0;
    }
  }

  .body {
    padding-top: 6.4rem;
    padding-bottom: 12rem;
    border-top: 0.1rem solid var.$c-gray-l;
    background-image: linear-gradient(
      to bottom,
      var.$c-white 0,
      var.$c-gray-l 100%
    );

    @include mixin.sp {
      padding-bottom: 6.4rem;
    }
  }

  .page-count {
    font-size: 1.4rem;
    margin-top: 2.4rem;

    @include mixin.sp {
      font-size: 1.2rem;
      margin-top: 1.6rem;
    }
  }

  .wrap {
    display: flex;
    justify-content: space-between;
    gap: 4rem;
    margin-top: 2.4rem;

    @include mixin.tab {
      flex-wrap: wrap;
    }
  }

  .main {
    flex-grow: 1;
    max-width: 84rem;

    @include mixin.tab {
      max-width: 100%;
    }
  }

  .pagination {
    margin-top: 6.4rem;

    @include mixin.tab {
      margin-top: 3.2rem;
    }
  }
</style>
