---
import Container from '@components/common/Container.astro'
import logo from '@assets/images/logo.svg';
import logoWhite from '@assets/images/logo-white.svg';
import { Image } from 'astro:assets';
const isTopPage = Astro.url.pathname === '/';
---

<header class="header js-header">
  <Container type="mx-l">
    <div class="inner">
      {
        isTopPage ? (
          <div class="logo-wrap">
            <Image class="logo -normal" src={logo} alt='WebTech Media' />
            <Image class="logo -white" src={logoWhite} alt='WebTech Media' />
          </div>
        ) : (
          <a href="/" class="logo-wrap -link">
            <Image class="logo -normal" src={logo} alt='WebTech Media' />
            <Image class="logo -white" src={logoWhite} alt='WebTech Media' />
          </a>
        )
      }
      <nav class="nav">
        <ul class="nav-list">
          <li class="nav-item">
            <a class="nav-link" href="/">HOME</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/article">記事一覧</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/contact">お問い合わせ</a>
          </li>
        </ul>
      </nav>
      <button class="hamburger-btn js-hamburger-btn">
        <span></span>
      </button>
    </div>
  </Container>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const hamburgerBtn = document.querySelector('.js-hamburger-btn');
    const body = document.body;

    hamburgerBtn.addEventListener('click', () => {
    body.classList.toggle('is-hamburger-menu-open');
  });
  });
</script>

<style lang="scss" is:global>
  body.is-hamburger-menu-open {
    overflow: hidden;

    .header {
      background-color: transparent;
      border-bottom: .1rem solid transparent;

      .logo {
        &.-normal {
          opacity: 0!important;
        }

        &.-white {
          opacity: 1!important;
        }
      }
    }

    .hamburger-btn {
      &::before, &::after {
        background-color: var.$c-white;
      }

      &::before {
        transform: rotate(45deg);
        transform-origin: center center;
      }

      &::after {
        transform: rotate(-45deg) scaleX(1);
        transform-origin: center center;

      }
    }

    .menu {
      opacity: 1;
      pointer-events: auto;
    }
  }

  body {
    overflow: auto;
  }
</style>

<style lang="scss">
  .header {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 8rem;
    display: flex;
    align-items: center;
    z-index: var.$z-header;
    background-color: var.$c-white;
    border-bottom: .1rem solid var.$c-gray-l;

    @include mixin.sp {
      height: 5.6rem;
    }
  }

  .inner {
    display: flex;
    justify-content: space-between;
  }

  .logo-wrap {
    position: relative;
    display: flex;
    align-items: center;
    width: 18rem;
    height: 2.5rem;

    @include mixin.sp {
      width: 14.4rem;
      height: 2rem;
    }

    .logo {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;

      &.-normal {
        opacity: 1;
      }

      &.-white {
        opacity: 0;
      }
    }

    &.-link {
      transition: all .3s;

      @include mixin.hover {
        &:hover {
          opacity: .8;
        }
      }
    }
  }

  .nav {
    @include mixin.sp {
      display: none;
    }
  }

  .nav-list {
    display: flex;
    gap: 2.4rem;
  }

  .nav-link {
    font-size: 1.4rem;
    font-weight: bold;
    transition: all .3s;

    @include mixin.hover {
      &:hover {
        color: var.$c-main-v;
      }
    }
  }

  .hamburger-btn {
    display: none;
    position: absolute;
    right: 1.6rem;
    top: 1.4rem;
    width: 2.5rem;
    height: 2.5rem;
    cursor: pointer;

    &::before, &::after {
      content: '';
      background-color: var.$c-main-v;
      width: 100%;
      height: .1rem;
      display: block;
      transform-origin: left center;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      margin: auto;
      transition: all .3s;
    }

    &::before {
      transform: translateY(-.3rem);
    }

    &::after {
      transform: translateY(.3rem) scaleX(.8);
    }

    @include mixin.sp {
      display: block;
    }
  }
</style>