---
import { FiChevronsLeft } from "react-icons/fi";
import { FiChevronsRight } from "react-icons/fi";
import { FiChevronLeft } from "react-icons/fi";
import { FiChevronRight } from "react-icons/fi";

const baseUrl = '/article/';
const {totalPages} = Astro.props;

const pageNumbers = Array.from({length: totalPages}, (_, i) => {
  return i + 1;
});

// ページ番号からページURLを生成
const getPageUrl = (pageNumber) => {
  return pageNumber === 1 ? page.url.first : `/article/${pageNumber}`;
}
---

<nav class="pagination" aria-label="ページネーション">
  <ul class="list">
    <li class="item">
      <span class="link -disabled"><FiChevronsLeft /></span>
    </li>

    <li class="item">
      <span class="link -disabled"><FiChevronLeft /></span>
    </li>

    {
      pageNumbers.map((pageNumber) => {
        return (
          <li class="item">
            {
              pageNumber === 1 ? (
                <span class="link current" aria-current="page">{pageNumber}</span>
              ) : (
                <a class="link" href={getPageUrl(pageNumber)}>{pageNumber}</a>
              )
            }
          </li>
        );
      })
    }

    <li class="item">
      <a class="link" href={`${baseUrl}2`}><FiChevronRight /></a>
    </li>

    <li class="item">
        <a class="link" href={`${baseUrl}${totalPages}`}><FiChevronsRight /></a>
    </li>
  </ul>
</nav>

<style lang="scss">
  .pagination {
    width: 100%;
    
    .list {
      display: flex;
      justify-content: center;
      gap: 1rem;

      @include mixin.sp {
        gap: .6rem;
      }
    }

    .link {
      width: 4rem;
      height: 4rem;
      border: 0.1rem solid #dfdfeb;
      background-color: var.$c-white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: var.$font-en;
      font-weight: 500;
      font-size: 1.4rem;

      @include mixin.sp {
        width: 3.2rem;
        height: 3.2rem;
        font-size: 1.2rem;
      }

      svg {
        font-size: 1.6rem;

        @include mixin.sp {
          font-size: 1.4rem;
        }
      }

      &.current {
        background-color: var.$c-main-v;
        color: var.$c-white;
        border-color: var.$c-main-v;
      }
    }

    a.link {
      transition: all .3s;

      @include mixin.hover {
        &:hover {
          background-color: var.$c-main-v;
          color: var.$c-white;
          border-color: var.$c-main-v;
        }
      }
    }

    span.link.-disabled {
      svg {
        opacity: 0.5;
      }
    }
  }
</style>