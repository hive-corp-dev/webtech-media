---
import { FiChevronsLeft } from "react-icons/fi";
import { FiChevronsRight } from "react-icons/fi";
import { FiChevronLeft } from "react-icons/fi";
import { FiChevronRight } from "react-icons/fi";

// paginate()関数で取得したpageプロパティ
const { page, baseUrl } = Astro.props;

// ページネーションの総ページ数
const totalPages = page.lastPage;

// ページ番号の配列 [1, 2, 3]のような形式で生成
const pageNumbers = Array.from({ length: totalPages }, (_, i) => {
	return i + 1;
});

// ページ番号からページURLを生成
const getPageUrl = (pageNumber) => {
	return pageNumber === 1 ? page.url.first : `${baseUrl}/${pageNumber}`;
};
---

<nav class="pagination" aria-label="ページネーション">
	<ul class="list">
		<!-- 最初のページ -->
		<li class="item">
			{
				page.url.first ? (
					<a class="link" href={page.url.first}>
						<FiChevronsLeft />
					</a>
				) : (
					<span class="link -disabled">
						<FiChevronsLeft />
					</span>
				)
			}
		</li>

		<!-- 前のページ -->
		<li class="item">
			{
				page.url.prev ? (
					<a class="link" href={page.url.prev}>
						<FiChevronLeft />
					</a>
				) : (
					<span class="link -disabled">
						<FiChevronLeft />
					</span>
				)
			}
		</li>

		<!-- ○番目のページ -->
		{
			pageNumbers.map((pageNumber) => {
				return (
					<li class="item">
						{page.currentPage === pageNumber ? (
							<span class="link current" aria-current="page">
								{pageNumber}
							</span>
						) : (
							<a class="link" href={getPageUrl(pageNumber)}>
								{pageNumber}
							</a>
						)}
					</li>
				);
			})
		}

		<!-- 次のページ -->
		<li class="item">
			{
				page.url.next ? (
					<a class="link" href={page.url.next}>
						<FiChevronRight />
					</a>
				) : (
					<span class="link -disabled">
						<FiChevronRight />
					</span>
				)
			}
		</li>

		<!-- 最後のページ -->
		<li class="item">
			{
				page.url.last ? (
					<a class="link" href={page.url.last}>
						<FiChevronsRight />
					</a>
				) : (
					<span class="link -disabled">
						<FiChevronsRight />
					</span>
				)
			}
		</li>
	</ul>
</nav>

<style lang="scss">
	.pagination {
		width: 100%;

		.list {
			display: flex;
			justify-content: center;
			gap: 1rem;

			@include mixin.sp {
				gap: 0.6rem;
			}
		}

		.link {
			width: 4rem;
			height: 4rem;
			border: 0.1rem solid #dfdfeb;
			background-color: var.$c-white;
			display: flex;
			align-items: center;
			justify-content: center;
			font-family: var.$font-en;
			font-weight: 500;
			font-size: 1.4rem;

			@include mixin.sp {
				width: 3.2rem;
				height: 3.2rem;
				font-size: 1.2rem;
			}

			svg {
				font-size: 1.6rem;

				@include mixin.sp {
					font-size: 1.4rem;
				}
			}

			&.current {
				background-color: var.$c-main-v;
				color: var.$c-white;
				border-color: var.$c-main-v;
			}
		}

		a.link {
			transition: all 0.3s;

			@include mixin.hover {
				&:hover {
					background-color: var.$c-main-v;
					color: var.$c-white;
					border-color: var.$c-main-v;
				}
			}
		}

		span.link.-disabled {
			svg {
				opacity: 0.5;
			}
		}
	}
</style>
